public class interface_test {
    public static void main(String[] args) {
        ComparableCircle c1=new ComparableCircle(2.3);
        ComparableCircle c2=new ComparableCircle(2.6);

        int comparevalue=c1.compareTo(c2);
        if(comparevalue>0)
            System.out.println("c1的对象大");
        if(comparevalue<0)
            System.out.println("c2的对象大");
        else
            System.out.println("一样大");
    }
}


//接口的引出：
//（1）一方面，有时必须从几个类中派生出一个子类，继承它们所有的属性和方法。但是，Java不支持多重继承。有了接口，就可以得到多重继承的效果。
//（2）另一方面，有时必须从几个类中抽取出一些共同的行为特征，而它们之间又没有is-a的关系，仅仅是具有相同的行为特征而已。
//（3）接口就是规范，定义的是一组规则，体现了现实世界中“如果你是/要…则 必须能…”的思想。继承是一个"是不是"的关系，而接口实现则是 “能不能” 的关系。
//（4）接口的本质是契约，标准，规范，就像我们的法律一样。制定好后大家都 要遵守。


//接口（interface）说明：
//（1）在java语言中，接口和类是并列的结构；
//（2）如何定义接口：定义接口中的成员
//① JDK7及以前： 只能定义全局常量和抽象方法

//全局常量：public static final的,但是书写时可以省略；
//抽象方法：public abstract的


//接口中不能定义构造器,说明不能实例化；
//java开发中，接口通过让类去实现（implements）的方式来使用：
//① 如果实现类覆盖了接口中的所有抽象方法，则此实现类就可以实例化；
//② 如果实现类没有覆盖接口中所有的抽象方法，则此实现类仍为一个抽象类；


//java类可以实现多个接口---->弥补了java的单继承性的局限性；
//接口和接口之间也是继承，并且是多继承:
//接口的具体使用，体现了多态性


//接口再次说明：
//① 定义Java类的语法格式：先写extends，后写implements ；
//格式：class SubClass extends SuperClass implements InterfaceA{ }
//② 一个类可以实现多个接口，接口也可以继承其它接口（多继承）。
//③ 接口的主要用途就是被实现类实现。（面向接口编程）
//④ 与继承关系类似，接口与实现类之间存在多态性。
//⑤ 接口和类是并列关系，或者可以理解为一种特殊的类。


//以下为jdk8的所有特点
//若一个接口中定义了一个默认方法，而另外一个接口中也定义了一个同名同参数的方法（不管此方法是否是默认方法），在实现类同时实现了这两个接口时，会出现：接口冲突。
//解决方式:实现类必须覆盖接口中同名同参数的方法，来解决冲突。

//若一个接口中定义了一个默认方法，而父类中也定义了一个同名同参数的非抽象方法，则不会出现冲突问题。
// 因为此时遵守：类优先原则。接口中具有相同名称和参数的默认方法会被忽略。

//